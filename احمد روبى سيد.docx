{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "79260f03",
   "metadata": {},
   "source": [
    "# Question 1 - Search"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "d901629b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "  Algorithm             Path  Cost\n",
      "0       DFS  [A, D, G, H, I]   NaN\n",
      "1        A*  [A, B, C, F, I]   6.0\n"
     ]
    }
   ],
   "source": [
    "graph = {\n",
    "    'A': [('B', 1), ('D', 2)],\n",
    "    'B': [('C', 1), ('E', 2)],\n",
    "    'C': [('F', 2)],\n",
    "    'D': [('E', 1), ('G', 2)],\n",
    "    'E': [('F', 1), ('H', 2)],\n",
    "    'F': [('I', 2)],\n",
    "    'G': [('H', 1)],\n",
    "    'H': [('I', 1)],\n",
    "    'I': []\n",
    "}\n",
    "\n",
    "heuristics = {\n",
    "    'A': 6, 'B': 5, 'C': 4,\n",
    "    'D': 5, 'E': 4, 'F': 3,\n",
    "    'G': 4, 'H': 3, 'I': 0\n",
    "}\n",
    "\n",
    "#DFS\n",
    "def dfs(start,goal):\n",
    "    visited = set()\n",
    "    stack = [(start, [start])]\n",
    "    while stack:\n",
    "        node , path = stack.pop()\n",
    "        if node == goal:\n",
    "            return path\n",
    "        if node not in visited:\n",
    "            visited.add(node)\n",
    "            for neighbor, _ in graph[node]:\n",
    "                stack.append((neighbor, path + [neighbor]))\n",
    "                \n",
    "    return None\n",
    "\n",
    "#A*\n",
    "\n",
    "def astar(start,goal):\n",
    "    visited = set()\n",
    "    pq = [(heuristics[start], 0, start, [start])]\n",
    "    while pq:\n",
    "        f, g, node, path = pq.pop(0)\n",
    "        if node == goal:\n",
    "            return path , g\n",
    "        if node not in visited:\n",
    "            visited.add(node)\n",
    "            for neighbor, weight in graph[node]:\n",
    "                new_g = g + weight\n",
    "                new_f = new_g + heuristics[neighbor]\n",
    "                pq.append((new_f, new_g, neighbor, path + [neighbor]))\n",
    "                \n",
    "    return None  \n",
    "\n",
    "#Print the result\n",
    "\n",
    "dfs_path = dfs('A','I')\n",
    "astar_path , astar_cost = astar('A','I')\n",
    "\n",
    "import pandas as pd\n",
    "\n",
    "results = pd.DataFrame({\n",
    "    \"Algorithm\" : [\"DFS\" , \"A*\"],\n",
    "    \"Path\" : [dfs_path, astar_path],\n",
    "    \"Cost\" : [None , astar_cost]\n",
    "})\n",
    "\n",
    "print(results)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "4c9f2435",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "a02a1526",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "e703221d",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'dfs' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-1-b91863478984>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[0;32m      1\u001b[0m \u001b[1;31m#Print the result\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      2\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m----> 3\u001b[1;33m \u001b[0mdfs_path\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mdfs\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m'A'\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;34m'I'\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m      4\u001b[0m \u001b[0mastar_path\u001b[0m \u001b[1;33m,\u001b[0m \u001b[0mastar_cost\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mastar\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m'A'\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;34m'I'\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      5\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mNameError\u001b[0m: name 'dfs' is not defined"
     ]
    }
   ],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "708470a7",
   "metadata": {},
   "source": [
    "# Question 2 - ML"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "95ff7b1f",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.datasets import load_iris\n",
    "import pandas as pd\n",
    "iris = load_iris()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4ff0d871",
   "metadata": {},
   "outputs": [],
   "source": [
    "#preparation\n",
    "iris_df = pd.DataFrame(data=iris.data, columns=iris.feature_names)\n",
    "null_check = iris_df.isnull().sum()\n",
    "summary_stats = iris_df.describe()\n",
    "print(null_check, summary_stats)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "a1c3bc3d",
   "metadata": {},
   "outputs": [],
   "source": [
    "iris_df['target'] = iris.target"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a9387593",
   "metadata": {},
   "outputs": [],
   "source": [
    "iris_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "af86d136",
   "metadata": {},
   "outputs": [],
   "source": [
    "iris_df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "dad20fb6",
   "metadata": {},
   "outputs": [],
   "source": [
    "X = iris_df.drop(['target'], axis='columns')\n",
    "y=iris_df.target"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "42c39ffa",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Splitting\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "e25821e5",
   "metadata": {},
   "outputs": [],
   "source": [
    "#KNN \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "2d11f9f5",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Naive Bayes\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "8e710ed8",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Accuracy Score\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
